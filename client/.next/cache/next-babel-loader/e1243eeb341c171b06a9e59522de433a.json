{"ast":null,"code":"var _jsxFileName = \"C:\\\\covid19\\\\client\\\\src\\\\components\\\\messages\\\\TypingIndicator.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Subscription } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { useContext } from 'react';\nimport UserContext from '../../components/UserContext';\nimport Text from 'evergreen-ui/commonjs/typography/src/Text';\nconst getUserTyping = gql`\nsubscription ($username: String ) {\n  user_typing (\n    where: {\n      username: {\n        _eq: $username\n      }\n    },\n    limit: 1\n    order_by: {\n      last_typed: desc\n    }\n  ){\n    last_typed\n    username\n  }\n}\n`;\n\nclass TypingIndicator extends React.Component {\n  render() {\n    return __jsx(\"div\", {\n      className: \"jsx-2426691021\" + \" \" + \"typingIndicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, __jsx(Subscription, {\n      subscription: getUserTyping,\n      variables: {\n        username: this.context.user\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) {\n        return \"\";\n      }\n\n      if (error) {\n        return \"\";\n      }\n\n      if (data.user_typing.length === 0) {\n        return \"\";\n      } else {\n        return `${data.user_typing[0].username} is typing ...`;\n      }\n    }), \" \", __jsx(_JSXStyle, {\n      id: \"2426691021\",\n      __self: this\n    }, \".typingIndicator.jsx-2426691021{font-size:12px;text-align:left;margin-left:30px;color:#66788A;}@media screen and (max-width:960px){.row.jsx-2426691021{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:-1.5rem 0;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRG9DLEFBSWtCLEFBU1MsZUFSUixnQkFDQyxpQkFDSCxjQUNoQixnQkFNcUIsaUJBQ25CIiwiZmlsZSI6IkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3JlYWN0LWFwb2xsbyc7XHJcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Vc2VyQ29udGV4dCc7XHJcbmltcG9ydCBUZXh0IGZyb20gJ2V2ZXJncmVlbi11aS9jb21tb25qcy90eXBvZ3JhcGh5L3NyYy9UZXh0J1xyXG5cclxuY29uc3QgZ2V0VXNlclR5cGluZyA9IGdxbGBcclxuc3Vic2NyaXB0aW9uICgkdXNlcm5hbWU6IFN0cmluZyApIHtcclxuICB1c2VyX3R5cGluZyAoXHJcbiAgICB3aGVyZToge1xyXG4gICAgICB1c2VybmFtZToge1xyXG4gICAgICAgIF9lcTogJHVzZXJuYW1lXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaW1pdDogMVxyXG4gICAgb3JkZXJfYnk6IHtcclxuICAgICAgbGFzdF90eXBlZDogZGVzY1xyXG4gICAgfVxyXG4gICl7XHJcbiAgICBsYXN0X3R5cGVkXHJcbiAgICB1c2VybmFtZVxyXG4gIH1cclxufVxyXG5gO1xyXG5cclxuXHJcbmNsYXNzIFR5cGluZ0luZGljYXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gVXNlckNvbnRleHQ7XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eXBpbmdJbmRpY2F0b3JcIj5cclxuICAgICAgICA8U3Vic2NyaXB0aW9uXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb249e2dldFVzZXJUeXBpbmd9XHJcbiAgICAgICAgICB2YXJpYWJsZXM9e3tcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuY29udGV4dC51c2VyXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgKHsgZGF0YSwgbG9hZGluZywgZXJyb3J9KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGxvYWRpbmcpIHsgcmV0dXJuIFwiXCI7IH1cclxuICAgICAgICAgICAgICBpZiAoZXJyb3IpIHsgcmV0dXJuIFwiXCI7IH1cclxuICAgICAgICAgICAgICBpZiAoZGF0YS51c2VyX3R5cGluZy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7ZGF0YS51c2VyX3R5cGluZ1swXS51c2VybmFtZX0gaXMgdHlwaW5nIC4uLmA7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC9TdWJzY3JpcHRpb24+IDxzdHlsZSBqc3g+e2BcclxuXHJcbi50eXBpbmdJbmRpY2F0b3Ige1xyXG4gIGZvbnQtc2l6ZTogMTJweDtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xyXG4gIGNvbG9yOiAjNjY3ODhBO1xyXG59XHJcblxyXG4vLyBDU1Mgb25seSBtZWRpYSBxdWVyeSBmb3IgdGFibGV0XHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk2MHB4KSB7XHJcbiAgLnJvdyB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luOiAtMS41cmVtIDA7XHJcbiAgfVxyXG4gIFxyXG59XHJcbmB9PC9zdHlsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVHlwaW5nSW5kaWNhdG9yOyJdfQ== */\\n/*@ sourceURL=C:\\\\\\\\covid19\\\\\\\\client\\\\\\\\src\\\\\\\\components\\\\\\\\messages\\\\\\\\TypingIndicator.js */\"));\n  }\n\n}\n\n_defineProperty(TypingIndicator, \"contextType\", UserContext);\n\n;\nexport default TypingIndicator;","map":{"version":3,"sources":["C:/covid19/client/src/components/messages/TypingIndicator.js"],"names":["React","Subscription","gql","useContext","UserContext","Text","getUserTyping","TypingIndicator","Component","render","username","context","user","data","loading","error","user_typing","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AAEA,MAAMC,aAAa,GAAGJ,GAAI;;;;;;;;;;;;;;;;;CAA1B;;AAoBA,MAAMK,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAE5CC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA,0CAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AACE,MAAA,YAAY,EAAEH,aADhB;AAEE,MAAA,SAAS,EAAE;AACTI,QAAAA,QAAQ,EAAE,KAAKC,OAAL,CAAaC;AADd,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAD,KAA6B;AAC3B,UAAID,OAAJ,EAAa;AAAE,eAAO,EAAP;AAAY;;AAC3B,UAAIC,KAAJ,EAAW;AAAE,eAAO,EAAP;AAAY;;AACzB,UAAIF,IAAI,CAACG,WAAL,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAQ,GAAEJ,IAAI,CAACG,WAAL,CAAiB,CAAjB,EAAoBN,QAAS,gBAAvC;AACD;AACF,KAfL,CADF;AAAA;AAAA;AAAA,yhGADF;AAuCD;;AA1C2C;;gBAAxCH,e,iBACiBH,W;;AA0CtB;AAED,eAAeG,eAAf","sourcesContent":["import React from 'react';\r\nimport { Subscription } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { useContext } from 'react';\r\nimport UserContext from '../../components/UserContext';\r\nimport Text from 'evergreen-ui/commonjs/typography/src/Text'\r\n\r\nconst getUserTyping = gql`\r\nsubscription ($username: String ) {\r\n  user_typing (\r\n    where: {\r\n      username: {\r\n        _eq: $username\r\n      }\r\n    },\r\n    limit: 1\r\n    order_by: {\r\n      last_typed: desc\r\n    }\r\n  ){\r\n    last_typed\r\n    username\r\n  }\r\n}\r\n`;\r\n\r\n\r\nclass TypingIndicator extends React.Component {\r\n  static contextType = UserContext;\r\n  render() {\r\n    return (\r\n      <div className=\"typingIndicator\">\r\n        <Subscription\r\n          subscription={getUserTyping}\r\n          variables={{\r\n            username: this.context.user\r\n          }}\r\n        >\r\n          {\r\n            ({ data, loading, error}) => {\r\n              if (loading) { return \"\"; }\r\n              if (error) { return \"\"; }\r\n              if (data.user_typing.length === 0) {\r\n                return \"\";\r\n              } else {\r\n                return `${data.user_typing[0].username} is typing ...`;\r\n              }\r\n            }\r\n          }\r\n        </Subscription> <style jsx>{`\r\n\r\n.typingIndicator {\r\n  font-size: 12px;\r\n  text-align: left;\r\n  margin-left: 30px;\r\n  color: #66788A;\r\n}\r\n\r\n// CSS only media query for tablet\r\n@media screen and (max-width: 960px) {\r\n  .row {\r\n    flex-direction: column;\r\n    margin: -1.5rem 0;\r\n  }\r\n  \r\n}\r\n`}</style>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default TypingIndicator;"]},"metadata":{},"sourceType":"module"}