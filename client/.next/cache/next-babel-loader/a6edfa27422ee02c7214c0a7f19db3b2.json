{"ast":null,"code":"var _jsxFileName = \"C:\\\\covid19\\\\client\\\\src\\\\components\\\\messages\\\\TypingIndicator.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Subscription } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { useContext } from 'react';\nimport UserContext from '../UserContext';\nimport Text from 'evergreen-ui/commonjs/typography/src/Text';\nconst getUserTyping = gql`\nsubscription ($username: String ) {\n  user_typing (\n    where: {\n      username: {\n        _eq: $username\n      }\n    },\n    limit: 1\n    order_by: {\n      last_typed: desc\n    }\n  ){\n    last_typed\n    username\n  }\n}\n`;\n\nclass TypingIndicator extends React.Component {\n  render() {\n    return __jsx(\"div\", {\n      className: \"jsx-2426691021\" + \" \" + \"typingIndicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, __jsx(Subscription, {\n      subscription: getUserTyping,\n      variables: {\n        username: this.context.user\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) {\n        return \"\";\n      }\n\n      if (error) {\n        return \"\";\n      }\n\n      if (data.user_typing.length === 0) {\n        return \"\";\n      } else {\n        return `${data.user_typing[0].username} is typing ...`;\n      }\n    }), \" \", __jsx(_JSXStyle, {\n      id: \"2426691021\",\n      __self: this\n    }, \".typingIndicator.jsx-2426691021{font-size:12px;text-align:left;margin-left:30px;color:#66788A;}@media screen and (max-width:960px){.row.jsx-2426691021{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:-1.5rem 0;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRG9DLEFBSWtCLEFBU1MsZUFSUixnQkFDQyxpQkFDSCxjQUNoQixnQkFNcUIsaUJBQ25CIiwiZmlsZSI6IkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3JlYWN0LWFwb2xsbyc7XHJcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi4vVXNlckNvbnRleHQnO1xyXG5pbXBvcnQgVGV4dCBmcm9tICdldmVyZ3JlZW4tdWkvY29tbW9uanMvdHlwb2dyYXBoeS9zcmMvVGV4dCdcclxuXHJcbmNvbnN0IGdldFVzZXJUeXBpbmcgPSBncWxgXHJcbnN1YnNjcmlwdGlvbiAoJHVzZXJuYW1lOiBTdHJpbmcgKSB7XHJcbiAgdXNlcl90eXBpbmcgKFxyXG4gICAgd2hlcmU6IHtcclxuICAgICAgdXNlcm5hbWU6IHtcclxuICAgICAgICBfZXE6ICR1c2VybmFtZVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGltaXQ6IDFcclxuICAgIG9yZGVyX2J5OiB7XHJcbiAgICAgIGxhc3RfdHlwZWQ6IGRlc2NcclxuICAgIH1cclxuICApe1xyXG4gICAgbGFzdF90eXBlZFxyXG4gICAgdXNlcm5hbWVcclxuICB9XHJcbn1cclxuYDtcclxuXHJcblxyXG5jbGFzcyBUeXBpbmdJbmRpY2F0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IFVzZXJDb250ZXh0O1xyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHlwaW5nSW5kaWNhdG9yXCI+XHJcbiAgICAgICAgPFN1YnNjcmlwdGlvblxyXG4gICAgICAgICAgc3Vic2NyaXB0aW9uPXtnZXRVc2VyVHlwaW5nfVxyXG4gICAgICAgICAgdmFyaWFibGVzPXt7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLmNvbnRleHQudXNlclxyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICh7IGRhdGEsIGxvYWRpbmcsIGVycm9yfSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChsb2FkaW5nKSB7IHJldHVybiBcIlwiOyB9XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7IHJldHVybiBcIlwiOyB9XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEudXNlcl90eXBpbmcubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2RhdGEudXNlcl90eXBpbmdbMF0udXNlcm5hbWV9IGlzIHR5cGluZyAuLi5gO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvU3Vic2NyaXB0aW9uPiA8c3R5bGUganN4PntgXHJcblxyXG4udHlwaW5nSW5kaWNhdG9yIHtcclxuICBmb250LXNpemU6IDEycHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBjb2xvcjogIzY2Nzg4QTtcclxufVxyXG5cclxuLy8gQ1NTIG9ubHkgbWVkaWEgcXVlcnkgZm9yIHRhYmxldFxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5NjBweCkge1xyXG4gIC5yb3cge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIG1hcmdpbjogLTEuNXJlbSAwO1xyXG4gIH1cclxuICBcclxufVxyXG5gfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFR5cGluZ0luZGljYXRvcjsiXX0= */\\n/*@ sourceURL=C:\\\\\\\\covid19\\\\\\\\client\\\\\\\\src\\\\\\\\components\\\\\\\\messages\\\\\\\\TypingIndicator.js */\"));\n  }\n\n}\n\n_defineProperty(TypingIndicator, \"contextType\", UserContext);\n\n;\nexport default TypingIndicator;","map":{"version":3,"sources":["C:/covid19/client/src/components/messages/TypingIndicator.js"],"names":["React","Subscription","gql","useContext","UserContext","Text","getUserTyping","TypingIndicator","Component","render","username","context","user","data","loading","error","user_typing","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AAEA,MAAMC,aAAa,GAAGJ,GAAI;;;;;;;;;;;;;;;;;CAA1B;;AAoBA,MAAMK,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAE5CC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA,0CAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AACE,MAAA,YAAY,EAAEH,aADhB;AAEE,MAAA,SAAS,EAAE;AACTI,QAAAA,QAAQ,EAAE,KAAKC,OAAL,CAAaC;AADd,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAD,KAA6B;AAC3B,UAAID,OAAJ,EAAa;AAAE,eAAO,EAAP;AAAY;;AAC3B,UAAIC,KAAJ,EAAW;AAAE,eAAO,EAAP;AAAY;;AACzB,UAAIF,IAAI,CAACG,WAAL,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAQ,GAAEJ,IAAI,CAACG,WAAL,CAAiB,CAAjB,EAAoBN,QAAS,gBAAvC;AACD;AACF,KAfL,CADF;AAAA;AAAA;AAAA,qgGADF;AAuCD;;AA1C2C;;gBAAxCH,e,iBACiBH,W;;AA0CtB;AAED,eAAeG,eAAf","sourcesContent":["import React from 'react';\r\nimport { Subscription } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { useContext } from 'react';\r\nimport UserContext from '../UserContext';\r\nimport Text from 'evergreen-ui/commonjs/typography/src/Text'\r\n\r\nconst getUserTyping = gql`\r\nsubscription ($username: String ) {\r\n  user_typing (\r\n    where: {\r\n      username: {\r\n        _eq: $username\r\n      }\r\n    },\r\n    limit: 1\r\n    order_by: {\r\n      last_typed: desc\r\n    }\r\n  ){\r\n    last_typed\r\n    username\r\n  }\r\n}\r\n`;\r\n\r\n\r\nclass TypingIndicator extends React.Component {\r\n  static contextType = UserContext;\r\n  render() {\r\n    return (\r\n      <div className=\"typingIndicator\">\r\n        <Subscription\r\n          subscription={getUserTyping}\r\n          variables={{\r\n            username: this.context.user\r\n          }}\r\n        >\r\n          {\r\n            ({ data, loading, error}) => {\r\n              if (loading) { return \"\"; }\r\n              if (error) { return \"\"; }\r\n              if (data.user_typing.length === 0) {\r\n                return \"\";\r\n              } else {\r\n                return `${data.user_typing[0].username} is typing ...`;\r\n              }\r\n            }\r\n          }\r\n        </Subscription> <style jsx>{`\r\n\r\n.typingIndicator {\r\n  font-size: 12px;\r\n  text-align: left;\r\n  margin-left: 30px;\r\n  color: #66788A;\r\n}\r\n\r\n// CSS only media query for tablet\r\n@media screen and (max-width: 960px) {\r\n  .row {\r\n    flex-direction: column;\r\n    margin: -1.5rem 0;\r\n  }\r\n  \r\n}\r\n`}</style>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default TypingIndicator;"]},"metadata":{},"sourceType":"module"}