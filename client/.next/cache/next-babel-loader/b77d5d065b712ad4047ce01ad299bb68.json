{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\covid19\\\\client\\\\src\\\\components\\\\messages\\\\TypingIndicator.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nsubscription ($username: String ) {\\n  user_typing (\\n    where: {\\n      username: {\\n        _eq: $username\\n      }\\n    },\\n    limit: 1\\n    order_by: {\\n      last_typed: desc\\n    }\\n  ){\\n    last_typed\\n    username\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Subscription } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { useContext } from 'react';\nimport UserContext from '../UserContext';\nimport Text from 'evergreen-ui/commonjs/typography/src/Text';\nvar getUserTyping = gql(_templateObject());\n\nvar TypingIndicator = /*#__PURE__*/function (_React$Component) {\n  _inherits(TypingIndicator, _React$Component);\n\n  var _super = _createSuper(TypingIndicator);\n\n  function TypingIndicator() {\n    _classCallCheck(this, TypingIndicator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TypingIndicator, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"jsx-2426691021\" + \" \" + \"typingIndicator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, __jsx(Subscription, {\n        subscription: getUserTyping,\n        variables: {\n          username: this.context.user\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading,\n            error = _ref.error;\n\n        if (loading) {\n          return \"\";\n        }\n\n        if (error) {\n          return \"\";\n        }\n\n        if (data.user_typing.length === 0) {\n          return \"\";\n        } else {\n          return \"\".concat(data.user_typing[0].username, \" is typing ...\");\n        }\n      }), \" \", __jsx(_JSXStyle, {\n        id: \"2426691021\",\n        __self: this\n      }, \".typingIndicator.jsx-2426691021{font-size:12px;text-align:left;margin-left:30px;color:#66788A;}@media screen and (max-width:960px){.row.jsx-2426691021{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:-1.5rem 0;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRG9DLEFBSWtCLEFBU1MsZUFSUixnQkFDQyxpQkFDSCxjQUNoQixnQkFNcUIsaUJBQ25CIiwiZmlsZSI6IkM6XFxjb3ZpZDE5XFxjbGllbnRcXHNyY1xcY29tcG9uZW50c1xcbWVzc2FnZXNcXFR5cGluZ0luZGljYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3JlYWN0LWFwb2xsbyc7XHJcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVXNlckNvbnRleHQgZnJvbSAnLi4vVXNlckNvbnRleHQnO1xyXG5pbXBvcnQgVGV4dCBmcm9tICdldmVyZ3JlZW4tdWkvY29tbW9uanMvdHlwb2dyYXBoeS9zcmMvVGV4dCdcclxuXHJcbmNvbnN0IGdldFVzZXJUeXBpbmcgPSBncWxgXHJcbnN1YnNjcmlwdGlvbiAoJHVzZXJuYW1lOiBTdHJpbmcgKSB7XHJcbiAgdXNlcl90eXBpbmcgKFxyXG4gICAgd2hlcmU6IHtcclxuICAgICAgdXNlcm5hbWU6IHtcclxuICAgICAgICBfZXE6ICR1c2VybmFtZVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGltaXQ6IDFcclxuICAgIG9yZGVyX2J5OiB7XHJcbiAgICAgIGxhc3RfdHlwZWQ6IGRlc2NcclxuICAgIH1cclxuICApe1xyXG4gICAgbGFzdF90eXBlZFxyXG4gICAgdXNlcm5hbWVcclxuICB9XHJcbn1cclxuYDtcclxuXHJcblxyXG5jbGFzcyBUeXBpbmdJbmRpY2F0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IFVzZXJDb250ZXh0O1xyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHlwaW5nSW5kaWNhdG9yXCI+XHJcbiAgICAgICAgPFN1YnNjcmlwdGlvblxyXG4gICAgICAgICAgc3Vic2NyaXB0aW9uPXtnZXRVc2VyVHlwaW5nfVxyXG4gICAgICAgICAgdmFyaWFibGVzPXt7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLmNvbnRleHQudXNlclxyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICh7IGRhdGEsIGxvYWRpbmcsIGVycm9yfSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChsb2FkaW5nKSB7IHJldHVybiBcIlwiOyB9XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7IHJldHVybiBcIlwiOyB9XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEudXNlcl90eXBpbmcubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2RhdGEudXNlcl90eXBpbmdbMF0udXNlcm5hbWV9IGlzIHR5cGluZyAuLi5gO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvU3Vic2NyaXB0aW9uPiA8c3R5bGUganN4PntgXHJcblxyXG4udHlwaW5nSW5kaWNhdG9yIHtcclxuICBmb250LXNpemU6IDEycHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBjb2xvcjogIzY2Nzg4QTtcclxufVxyXG5cclxuLy8gQ1NTIG9ubHkgbWVkaWEgcXVlcnkgZm9yIHRhYmxldFxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5NjBweCkge1xyXG4gIC5yb3cge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIG1hcmdpbjogLTEuNXJlbSAwO1xyXG4gIH1cclxuICBcclxufVxyXG5gfTwvc3R5bGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFR5cGluZ0luZGljYXRvcjsiXX0= */\\n/*@ sourceURL=C:\\\\\\\\covid19\\\\\\\\client\\\\\\\\src\\\\\\\\components\\\\\\\\messages\\\\\\\\TypingIndicator.js */\"));\n    }\n  }]);\n\n  return TypingIndicator;\n}(React.Component);\n\n_defineProperty(TypingIndicator, \"contextType\", UserContext);\n\n;\nexport default TypingIndicator;","map":{"version":3,"sources":["C:/covid19/client/src/components/messages/TypingIndicator.js"],"names":["React","Subscription","gql","useContext","UserContext","Text","getUserTyping","TypingIndicator","username","context","user","data","loading","error","user_typing","length","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AAEA,IAAMC,aAAa,GAAGJ,GAAH,mBAAnB;;IAoBMK,e;;;;;;;;;;;;;6BAEK;AACP,aACE;AAAA,4CAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AACE,QAAA,YAAY,EAAED,aADhB;AAEE,QAAA,SAAS,EAAE;AACTE,UAAAA,QAAQ,EAAE,KAAKC,OAAL,CAAaC;AADd,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,gBAA6B;AAAA,YAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,YAApBC,OAAoB,QAApBA,OAAoB;AAAA,YAAXC,KAAW,QAAXA,KAAW;;AAC3B,YAAID,OAAJ,EAAa;AAAE,iBAAO,EAAP;AAAY;;AAC3B,YAAIC,KAAJ,EAAW;AAAE,iBAAO,EAAP;AAAY;;AACzB,YAAIF,IAAI,CAACG,WAAL,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,iBAAO,EAAP;AACD,SAFD,MAEO;AACL,2BAAUJ,IAAI,CAACG,WAAL,CAAiB,CAAjB,EAAoBN,QAA9B;AACD;AACF,OAfL,CADF;AAAA;AAAA;AAAA,ugGADF;AAuCD;;;;EA1C2BR,KAAK,CAACgB,S;;gBAA9BT,e,iBACiBH,W;;AA0CtB;AAED,eAAeG,eAAf","sourcesContent":["import React from 'react';\r\nimport { Subscription } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { useContext } from 'react';\r\nimport UserContext from '../UserContext';\r\nimport Text from 'evergreen-ui/commonjs/typography/src/Text'\r\n\r\nconst getUserTyping = gql`\r\nsubscription ($username: String ) {\r\n  user_typing (\r\n    where: {\r\n      username: {\r\n        _eq: $username\r\n      }\r\n    },\r\n    limit: 1\r\n    order_by: {\r\n      last_typed: desc\r\n    }\r\n  ){\r\n    last_typed\r\n    username\r\n  }\r\n}\r\n`;\r\n\r\n\r\nclass TypingIndicator extends React.Component {\r\n  static contextType = UserContext;\r\n  render() {\r\n    return (\r\n      <div className=\"typingIndicator\">\r\n        <Subscription\r\n          subscription={getUserTyping}\r\n          variables={{\r\n            username: this.context.user\r\n          }}\r\n        >\r\n          {\r\n            ({ data, loading, error}) => {\r\n              if (loading) { return \"\"; }\r\n              if (error) { return \"\"; }\r\n              if (data.user_typing.length === 0) {\r\n                return \"\";\r\n              } else {\r\n                return `${data.user_typing[0].username} is typing ...`;\r\n              }\r\n            }\r\n          }\r\n        </Subscription> <style jsx>{`\r\n\r\n.typingIndicator {\r\n  font-size: 12px;\r\n  text-align: left;\r\n  margin-left: 30px;\r\n  color: #66788A;\r\n}\r\n\r\n// CSS only media query for tablet\r\n@media screen and (max-width: 960px) {\r\n  .row {\r\n    flex-direction: column;\r\n    margin: -1.5rem 0;\r\n  }\r\n  \r\n}\r\n`}</style>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default TypingIndicator;"]},"metadata":{},"sourceType":"module"}