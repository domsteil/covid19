{"ast":null,"code":"var _jsxFileName = \"C:\\\\covid19\\\\client\\\\src\\\\components\\\\cases\\\\ResolveCase.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport OrganizationContext from '../OrganizationContext';\nimport Component from \"@reach/component-component\";\nimport Dialog from 'evergreen-ui/commonjs/dialog/src/Dialog';\nimport Pane from 'evergreen-ui/commonjs/layers/src/Pane';\nimport Popover from 'evergreen-ui/commonjs/popover/src/Popover';\nimport Button from 'evergreen-ui/commonjs/buttons/src/Button';\nimport Heading from 'evergreen-ui/commonjs/typography/src/Heading';\nimport TextInput from 'evergreen-ui/commonjs/text-input/src/TextInput';\nimport axios from 'axios';\nimport querystring from 'querystring';\nexport default function ResolveCase(props) {\n  var _this = this;\n\n  var _useContext = useContext(OrganizationContext),\n      nodeName = _useContext.nodeName;\n\n  var _useState = useState(''),\n      caseNumber = _useState[0],\n      setCaseNumber = _useState[1];\n\n  var _useState2 = useState(''),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var resolveCase = function resolveCase() {\n    var axiosConfig = {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"POST,GET,OPTIONS, PUT, DELETE\"\n      }\n    };\n    axios.post(\"https://dapps.ngrok.io/api/\" + nodeName + \"/resolveCase?\" + \"caseNumber=\" + caseNumber, querystring.stringify({\n      caseNumber: caseNumber\n    }), axiosConfig).then(function (res) {\n      var caseData = res.data;\n      setMessage('Case' + caseNumber + 'has been resolved.'); // toast\n\n      console.log(res.data);\n    });\n  };\n\n  return __jsx(Component, {\n    initialState: {\n      isShown: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 3\n    }\n  }, function (_ref) {\n    var state = _ref.state,\n        setState = _ref.setState;\n    return __jsx(Pane, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, __jsx(Dialog, {\n      isShown: state.isShown,\n      onCloseComplete: resolveCase,\n      title: \"Resolve Case\",\n      intent: \"success\",\n      hasHeader: false,\n      confirmLabel: \"Resolve Case\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, \"Resolve the Case with the Counterparty\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }), __jsx(TextInput, {\n      name: caseNumber,\n      type: \"text\",\n      placeholder: \"Case Number\",\n      onChange: function onChange(e) {\n        return setCaseNumber(e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    })), __jsx(Button, {\n      marginRight: 16,\n      onClick: function onClick() {\n        return setState({\n          isShown: true\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, \"Resolve\"), \" \", message);\n  });\n}\n;","map":{"version":3,"sources":["C:/covid19/client/src/components/cases/ResolveCase.js"],"names":["React","useEffect","useState","useContext","OrganizationContext","Component","Dialog","Pane","Popover","Button","Heading","TextInput","axios","querystring","ResolveCase","props","nodeName","caseNumber","setCaseNumber","message","setMessage","resolveCase","axiosConfig","headers","post","stringify","then","res","caseData","data","console","log","isShown","state","setState","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport OrganizationContext from '../OrganizationContext';\r\nimport Component from \"@reach/component-component\";\r\nimport Dialog from 'evergreen-ui/commonjs/dialog/src/Dialog';\r\nimport Pane from 'evergreen-ui/commonjs/layers/src/Pane'\r\nimport Popover from 'evergreen-ui/commonjs/popover/src/Popover';\r\nimport Button from 'evergreen-ui/commonjs/buttons/src/Button'\r\nimport Heading from 'evergreen-ui/commonjs/typography/src/Heading'\r\nimport TextInput from 'evergreen-ui/commonjs/text-input/src/TextInput'\r\nimport axios from 'axios';\r\nimport querystring from 'querystring';\r\n\r\n\r\nexport default function ResolveCase(props) {\r\n\r\nconst { nodeName } = useContext(OrganizationContext);\r\nconst [caseNumber, setCaseNumber] = useState('');\r\nconst [message, setMessage] = useState('');\r\n\r\nlet resolveCase = () => {\r\n  \r\n    let axiosConfig = {\r\n      headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Access-Control-Allow-Methods\": \"POST,GET,OPTIONS, PUT, DELETE\"\r\n      }\r\n    };\r\n  \r\n    axios.post(`https://dapps.ngrok.io/api/` + nodeName + `/resolveCase?` + `caseNumber=` + caseNumber, querystring.stringify({ caseNumber: caseNumber}),  axiosConfig)\r\n    .then(res => {\r\n  \r\n      const caseData = res.data;\r\n      setMessage('Case' + caseNumber + 'has been resolved.'); // toast\r\n      console.log(res.data);\r\n    })\r\n  }\r\n\r\n  return (\r\n\r\n  <Component initialState={{ isShown: false }}>\r\n  {({ state, setState }) => (\r\n    <Pane>\r\n      <Dialog\r\n        isShown={state.isShown}\r\n        onCloseComplete={resolveCase}\r\n        title=\"Resolve Case\"\r\n        intent=\"success\"\r\n        hasHeader={false}\r\n        confirmLabel=\"Resolve Case\"\r\n      >\r\n        Resolve the Case with the Counterparty\r\n        <br/>\r\n        <br/>\r\n        <TextInput\r\n          name={caseNumber}\r\n          type=\"text\"\r\n          placeholder=\"Case Number\"\r\n          onChange={e => setCaseNumber(e.target.value)}\r\n        />\r\n        <br/>\r\n      </Dialog>\r\n\r\n      <Button marginRight={16} onClick={() => setState({ isShown: true })}>Resolve</Button> {message}\r\n    </Pane>\r\n  )}\r\n</Component>\r\n  )\r\n};"]},"metadata":{},"sourceType":"module"}