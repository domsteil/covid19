// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as GraphqlTag from "graphql-tag";
import * as ReactApollo from "react-apollo";
import * as Js_null_undefined from "bs-platform/lib/es6/js_null_undefined.js";
import * as ReasonApolloUtils from "../ReasonApolloUtils.bs.js";

function Make(Config) {
  var graphqlQueryAST = GraphqlTag(Config[/* query */0]);
  var apolloDataToVariant = function (apolloData) {
    var match = apolloData.loading;
    var match$1 = apolloData.data;
    var match$2 = apolloData.error;
    if (match) {
      return /* Loading */0;
    } else if (match$1 == null) {
      if (match$2 == null) {
        return /* Error */Block.__(0, [{
                    message: "No data",
                    graphQLErrors: null,
                    networkError: null
                  }]);
      } else {
        return /* Error */Block.__(0, [match$2]);
      }
    } else {
      return /* Data */Block.__(1, [Curry._1(Config[/* parse */1], match$1)]);
    }
  };
  var convertJsInputToReason = function (apolloData) {
    var match = ReasonApolloUtils.getNonEmptyObj(apolloData.data);
    var tmp;
    if (match !== undefined) {
      var exit = 0;
      var parsedData;
      try {
        parsedData = Curry._1(Config[/* parse */1], Caml_option.valFromOption(match));
        exit = 1;
      }
      catch (exn){
        tmp = undefined;
      }
      if (exit === 1) {
        tmp = Caml_option.some(parsedData);
      }
      
    } else {
      tmp = undefined;
    }
    var match$1 = apolloData.error;
    return /* record */[
            /* result */apolloDataToVariant(apolloData),
            /* data */tmp,
            /* error */(match$1 == null) ? undefined : Caml_option.some(match$1),
            /* loading */apolloData.loading,
            /* refetch */(function (variables) {
                return Curry._1(apolloData.refetch, Js_null_undefined.fromOption(variables)).then((function (data) {
                              return Promise.resolve(apolloDataToVariant(data));
                            }));
              }),
            /* fetchMore */(function (variables, updateQuery, param) {
                var tmp = {
                  updateQuery: updateQuery
                };
                if (variables !== undefined) {
                  tmp.variables = Caml_option.valFromOption(variables);
                }
                return Curry._1(apolloData.fetchMore, tmp);
              }),
            /* networkStatus */Caml_option.nullable_to_opt(apolloData.networkStatus),
            /* subscribeToMore */(function ($$document, variables, updateQuery, onError, param) {
                var tmp = {
                  document: $$document
                };
                if (variables !== undefined) {
                  tmp.variables = Caml_option.valFromOption(variables);
                }
                if (updateQuery !== undefined) {
                  tmp.updateQuery = Caml_option.valFromOption(updateQuery);
                }
                if (onError !== undefined) {
                  tmp.onError = Caml_option.valFromOption(onError);
                }
                return Curry._1(apolloData.subscribeToMore, tmp);
              })
          ];
  };
  var JsQuery = /* module */[];
  var ReasonApolloQuery$Make = function (Props) {
    var variables = Props.variables;
    var pollInterval = Props.pollInterval;
    var notifyOnNetworkStatusChange = Props.notifyOnNetworkStatusChange;
    var fetchPolicy = Props.fetchPolicy;
    var errorPolicy = Props.errorPolicy;
    var ssr = Props.ssr;
    var displayName = Props.displayName;
    var skip = Props.skip;
    var onCompleted = Props.onCompleted;
    var onError = Props.onError;
    var partialRefetch = Props.partialRefetch;
    var delay = Props.delay;
    var context = Props.context;
    var children = Props.children;
    return React.createElement(ReactApollo.Query, {
                query: graphqlQueryAST,
                variables: variables,
                pollInterval: pollInterval,
                notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
                fetchPolicy: fetchPolicy,
                errorPolicy: errorPolicy,
                ssr: ssr,
                displayName: displayName,
                skip: skip,
                onCompleted: onCompleted,
                onError: onError,
                partialRefetch: partialRefetch,
                delay: delay,
                context: context,
                children: (function (apolloData) {
                    return Curry._1(children, convertJsInputToReason(apolloData));
                  })
              });
  };
  return /* module */[
          /* graphqlQueryAST */graphqlQueryAST,
          /* apolloDataToVariant */apolloDataToVariant,
          /* convertJsInputToReason */convertJsInputToReason,
          /* JsQuery */JsQuery,
          /* make */ReasonApolloQuery$Make
        ];
}

export {
  Make ,
  
}
/* react Not a pure module */
